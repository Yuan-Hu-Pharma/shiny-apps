cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = manipulate::slider(0.4, .8, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = manipulate::slider(0.4, .8, step = 0.02))
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
myPlot
library(manipulate)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
search()
install.packages("caret")
library(caret)
data(spam)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=F)
inTrain
head(inTrain)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=T)
head(inTrain)
class(inTrain)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=F)
class(inTrain)
training<-spam[inTrain,]
training
testing<-spam[-inTrain,]
dim(training)
dim(testing)
dim(spam)
dimnames(spam)
dimnames(spam[,2])
dimnames(spam[,1])
dimnames(spam[1])
dimnames(spam[2])
names(spam)
set.seed(32343)
modelFit<-train(type~., data=training, method"glm")
modelFit<-train(type~., data=training, method="glm")
?glm
modelFit<-train(type~., data=training, method="lm")
modelFit<-train(type~lab, data=training, method="lm")
search()
ls()
?train
modelFit<-train(type~., data=training, method="glm")
install.packages("e1071")
modelFit<-train(type~., data=training, method="glm")
modelFit
dim(training)
modelFit$finalModel
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
names(AlzheimerDisease)
class(AlzheimerDisease)
ls()
head(predictors)
head(diagnosis)
head(diagnosis)
diagnosis
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
head(adData)
names(adData)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(training$CompressiveStrength, dimnames$training[1,])
dimnames(training)
dimnames(training)[1]
qplot(training$CompressiveStrength, dimnames(training[1]))
qplot(training$CompressiveStrength, as.numeric(dimnames(training[1])))
qplot(training$CompressiveStrength, as.integer(dimnames(training[1])))
training[1]
qplot(training$CompressiveStrength, c(1:nrow(training))
)
qplot(training$CompressiveStrength, c(1:nrow(training)))
qplot(CompressiveStrength, c(1:nrow(training)), data=training)
qplot(CompressiveStrength, PLGF, data=training)
names(training)
qplot(CompressiveStrength, Age, data=training)
a<-qplot(CompressiveStrength, Age, data=training)
print(a)
a
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training)
hist(Superpasticizer, Cement,data=training)
?hist
hist(Superpasticizer,data=training)
hist(training$Superpasticizer)
training$Superpasticizer
training$Superplasticizer
hist(training$Superplasticizer)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
intrain <-createDataPartition(y=segmentationOriginal$)
head (segmentationOriginal)
names(segmentationOriginal)
intrain <-createDataPartition(y=segmentationOriginal$Case, p=0.7, list=F)
training <- segmentationOriginal[intrain, ]
testing <- segmentationOriginal[-intrain, ]
dim(training)
dim(testing)
set.seed(125)
modFit<-train(Case~., method='rpart', data=training)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$Case)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
predict(modFit, newdata=testing)
?predict
head (segmentationOriginal)
head (segmentationOriginal$Case)
training <- segmentationOriginal[which(segmentationOriginal$Case="Train"), ]
training <- segmentationOriginal[which(segmentationOriginal$Case=="Train"), ]
testing <- segmentationOriginal[which(segmentationOriginal$Case=="Test"), ]
modFit<-train(Case~., method='rpart', data=training)
modFit<-train(Case~., method='rpart', data=training)
head(training)
head(testing)
modFit<-train(Class~., method='rpart', data=training)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
modFit <-train(Area~., method="rpart", data=olive)
head(olive)
sapply(olive, calss)
sapply(olive, class)
table(olive)
sum(is.na(olive))
modFit <-train(Area~., method="rpart", data=olive)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
prdict(modelFit, newdata = as.data.frame(t(colMeans(olive))))
predict(modelFit, newdata = as.data.frame(t(colMeans(olive))))
rm(newdata)
predict(modelFit, newdata = as.data.frame(t(colMeans(olive))))
ewdata = as.data.frame(t(colMeans(olive)))
ewdata
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=training)
modFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl, method="glm", family="binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA)
missClass(trainSA, modFit)
missClass(trainSA, modFit$finalModel)
missClass(trainSA$chd, modFit$finalModel)
modFit
modFit$finalModel
trainFit<-predict(modFit, newdata=trainSA)
missClass(trainSA$chd, trainFit$chd)
trainFit
missClass(trainSA$chd, trainFit)
testFit<-predict(modFit, newdata=testSA)
missClass(testSA$chd, testFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
set.seed(33833)
modFit<-train(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, method='rf', prox=T, data=vowel.train)
rfNews()
modFit<-train(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, method='rf', prox=T, data=vowel.train)
?varImp
varImp(modFit)
modFit
varImp(modFit, useModel='rf')
varImpPlot(modFit$finalModel)
varImpPlot(modFit$finalModel, decreasing =F)
varImpPlot(modFit$finalModel, decreasing=F)
varImpPlot(modFit$finalModel, decreasing=FALSE)
a<-varImpPlot(modFit$finalModel)
varImpPlot(modFit$finalModel)
a<-varImpPlot(modFit$finalModel)
a
sort(a)
sort(a[1])
sort(a[,1])
set.seed(33833)
modFit<-train(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, method='rf', prox=T, data=vowel.train, importance=FALSE)
varImpPlot(modFit$finalModel)
set.seed(33833)
odFit<-train(y~. method='rf', prox=T, data=vowel.train, importance=FALSE)
modFit<-train(y~., method='rf', prox=T, data=vowel.train, importance=FALSE)
varImpPlot(modFit$finalModel)
varImpPlot(modFit$finalModel)
a<-varImpPlot(modFit$finalModel, scale=T)
a
a<-varImpPlot(modFit$finalModel, scale=100)
a
sort(a[,1])
set.seed(33833)
modFit<-train(y~., method='rf', data=vowel.train)
modFit$finalModel$importance[,'MeanDecreaseGini']
?MeanDecreaseGini
?train
varImpPlot(modFit$finalModel)
modFit<-randomForest(y~., method='rf', data=vowel.train)
varImpPlot(modFit$finalModel)
modFit
varImpPlot(modFit$finalModel)
varImpPlot(modFit)
set.seed(83833)
modFit<-randomForest(y~., method='rf', data=vowel.train)
varImpPlot(modFit)
set.seed(33833)
modFit<-train(y~., method='rf', data=vowel.train, tuneGrid=expand.grid(mtry=1)")
modFit<-train(y~., method='rf', data=vowel.train, tuneGrid=expand.grid(mtry=1))
varImpPlot(modFit$finalModel)
?randomForest
set.seed(33833)
modFit<-randomForest(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, data=vowel.train, importance=FALSE)
varImpPlot(modFit)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
set.seed(33833)
modFit<-train(y~., method='rf', data=vowel.train)
varImpPlot(modFit$finalModel)
?varImpPlot
set.seed(33833)
modFit<-randomForest(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, data=vowel.train, importance=TRUE)
varImpPlot(modFit)
set.seed(33833)
modFit<-randomForest(y~., data=vowel.train, importance=TRUE)
varImpPlot(modFit)
?train
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
set.seed(33833)
modFit<-train(y~., method='rf', data=vowel.train)
varImpPlot(modFit$finalModel)
set.seed(33833)
modFit<-randomForest(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, data=vowel.train)
varImpPlot(modFit)
set.seed(33833)
modFit<-train(y~x.1+x.2+x.3+x.4+x.5+x.6+x.7+x.8+x.9+x.10, method='rf', prox=T, data=vowel.train, importance=FALSE)
varImpPlot(modFit$finalModel)
x<-rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
smoothScatter(x,y)
x<-rnorm(100000)
smoothScatter(x,y)
y<-rnorm(100000)
smoothScatter(x,y)
plot(x,y)
plot(jitter(x),y)
plot(jitter(x),jitter(y)
)
smoothScatter(x,y)
plot(x,y, col=rgb(0,0,0, 0.3))
plot(x,y, col=rgb(0,0,255, 0.3), pch=19)
plot(x,y, col=rgb(0,0,1, 0.3), pch=19)
plot(x,y, col=rgb(0,0,1, 0.2), pch=19)
plot(x,y, col=rgb(0,0,1, 0.1), pch=19)
plot(x,y, col=rgb(0,0,1, 0.05), pch=19)
plot(x,y, col=rgb(0,0,1, 0.01), pch=19)
#read in the header of the table
cnames = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";"))
#read the 2 days data, and assign the header name to this table
datapw <- read.table('household_power_consumption.txt', col.names=cnames, header = T,
sep = ';', stringsAsFactors = F, na.strings = '?', skip = 66636, nrow = 2880,
colClasses=c("character", "character",rep("numeric",7)))
#Transforming Date/time data
datapw$DateTime <- strptime(paste(datapw$Date, datapw$Time),
"%d/%m/%Y  %H:%M:%S")
# Create png device to write histogram to. set White background and 480 x 480 in size.
png("plot1.png", bg="transparant", width = 480, height =480)
## Draw the histogram of plot 1 in a png file
hist(datapw$Global_active_power, main="Global Active Power",
xlab = "Global Active Power (kilowatts)", col="red")
# close the .png graphics device
dev.off()
#read in the header of the table
cnames = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";"))
#read the 2 days data, and assign the header name to this table
datapw <- read.table('household_power_consumption.txt', col.names=cnames, header = T,
sep = ';', stringsAsFactors = F, na.strings = '?', skip = 66636, nrow = 2880,
colClasses=c("character", "character",rep("numeric",7)))
#Transforming Date/time data
datapw$DateTime <- strptime(paste(datapw$Date, datapw$Time),
"%d/%m/%Y  %H:%M:%S")
# Create png device to write histogram to. set White background and 480 x 480 in size.
png("plot1.png", bg="transparant", width = 480, height =480)
## Draw the histogram of plot 1 in a png file
hist(datapw$Global_active_power, main="Global Active Power",
xlab = "Global Active Power (kilowatts)", col="red")
# close the .png graphics device
dev.off()
#read in the header of the table
cnames = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";"))
#read the 2 days data, and assign the header name to this table
datapw <- read.table('household_power_consumption.txt', col.names=cnames, header = T,
sep = ';', stringsAsFactors = F, na.strings = '?', skip = 66636, nrow = 2880,
colClasses=c("character", "character",rep("numeric",7)))
#Transforming Date/time data
datapw$DateTime <- strptime(paste(datapw$Date, datapw$Time),
"%d/%m/%Y  %H:%M:%S")
# Create png device to write histogram to. set White background and 480 x 480 in size.
png("plot1.png", bg="transparent", width = 480, height =480)
## Draw the histogram of plot 1 in a png file
hist(datapw$Global_active_power, main="Global Active Power",
xlab = "Global Active Power (kilowatts)", col="red")
# close the .png graphics device
dev.off()
#read in the header of the table
cnames = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";"))
#read the 2 days data, and assign the header name to this table
datapw <- read.table('household_power_consumption.txt', col.names=cnames, header = T,
sep = ';', stringsAsFactors = F, na.strings = '?', skip = 66636, nrow = 2880,
colClasses=c("character", "character",rep("numeric",7)))
#Transforming Date/time data
datapw$DateTime <- strptime(paste(datapw$Date, datapw$Time),
"%d/%m/%Y  %H:%M:%S")
# Create png device to write to. set White background and 480 x 480 in size.
png("plot2.png", bg="transparent", width = 480, height =480)
## Draw the plot 2 in a png file
plot(datapw$DateTime, datapw$Global_active_power,
main="", xlab="",ylab="Global Active Power (kilowatts)",
col="black",type='l')
# close the .png graphics device
dev.off()
#read in the header of the table
cnames = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";"))
#read the 2 days data, and assign the header name to this table
datapw <- read.table('household_power_consumption.txt', col.names=cnames, header = T,
sep = ';', stringsAsFactors = F, na.strings = '?', skip = 66636, nrow = 2880,
colClasses=c("character", "character",rep("numeric",7)))
#Transforming Date/time data
datapw$DateTime <- strptime(paste(datapw$Date, datapw$Time),
"%d/%m/%Y  %H:%M:%S")
# Create png device to write to. set White background and 480 x 480 in size.
png("plot3.png", bg="transparent", width = 480, height =480)
par(mar = c(3,4,2,1))
plot(datapw$DateTime,datapw$Sub_metering_1,ylab="Energy sub metering",type="n")
with(datapw, lines(DateTime, Sub_metering_1, col = "black"))
with(datapw, lines(DateTime, Sub_metering_2, col = "red"))
with(datapw, lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright",lty=c(1,1,1),col=c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
# close the .png graphics device
dev.off()
#read in the header of the table
cnames = colnames(read.table("household_power_consumption.txt",
nrow = 1, header = TRUE, sep=";"))
#read the 2 days data, and assign the header name to this table
datapw <- read.table('household_power_consumption.txt', col.names=cnames, header = T,
sep = ';', stringsAsFactors = F, na.strings = '?', skip = 66636, nrow = 2880,
colClasses=c("character", "character",rep("numeric",7)))
#Transforming Date/time data
datapw$DateTime <- strptime(paste(datapw$Date, datapw$Time),
"%d/%m/%Y  %H:%M:%S")
# Create png device to write to. set White background and 480 x 480 in size.
png("plot4.png", bg="transparent", width=480,height=480)
#Multiple plot
par(mfrow = c (2,2))
#Graphic top left
with(datapw,plot(DateTime,Global_active_power, type="l",xlab="",ylab="Global Active Power"))
#Graphic top right
with(datapw,plot(DateTime,Voltage, type="l",xlab="datetime",ylab="Voltage"))
#Graphic bottom left
plot(datapw$DateTime,datapw$Sub_metering_1,xlab="",ylab="Energy sub metering",type="n")
with(datapw, lines(DateTime, Sub_metering_1, col = "black"))
with(datapw, lines(DateTime, Sub_metering_2, col = "red"))
with(datapw, lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright",bty="n", lty=c(1,1,1),col=c("black","red","blue"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"))
#Graphic bottom right"
with(datapw,plot(DateTime,Global_reactive_power, type="l",xlab="datetime"))
# close the .png graphics device
dev.off()
setwd("~/Desktop/my-app/gogogog")
shiny::runApp()
shiny::runApp()
data1 <- df
h1 <- hPlot(x = "date", y = "value", data = data1[data1$mon==input$mon,][data1[data1$mon==input$mon,]$Day==input$day,], type = c("line"), group = "city")
h1$xAxis(ticks="" )
h1$set(dom = 'dayplot')
head(data1)
data1 <- df
head(data1)
head(df)
df<-read.csv("df.csv",stringsAsFactors=F)
head(df)
shiny::runApp()
head(df)
data1 <-read.csv("df.csv",stringsAsFactors=F)
head(data1)
shiny::runApp()
data1<-data1[data1$mon==1,][data1[data1$mon==1,]$Day==1,]
data1 <-read.csv("df.csv",stringsAsFactors=F)
data<-data1[data1$mon==1,][data1[data1$mon==1,]$Day==1,]
h1 <- hPlot(x = "date", y = "value", data,  type = c("line"), group = "city")
h1$xAxis(ticks="" )
h1$set(dom = 'dayplot')
h1
shiny::runApp()
